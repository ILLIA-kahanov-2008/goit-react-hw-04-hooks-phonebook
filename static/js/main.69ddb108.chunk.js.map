{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","hooks/useLS.js","index.js"],"names":["module","exports","ContactForm","cbAddNewContact","useState","name","setName","number","setNumber","handleChange","e","target","value","className","styles","form","onSubmit","preventDefault","newContact","id","shortid","type","pattern","title","required","onChange","placeholder","Styles","styled","div","ContactList","cbRemoveContact","filteredContacts","handleClick","map","style","textTransform","onClick","Filter","filteringName","cbInputChange","filter","App","key","init_value","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLS","contacts","setContacts","setFilter","useMemo","toLowerCase","includes","some","contact","alert","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69ddb108.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__12MBc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3knJ5\"};","import { useState} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\n\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm ({cbAddNewContact}) {\r\n  const [name, setName] = useState('');\r\nconst [number, setNumber] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value)\r\n        break;\r\n    case \"number\":\r\n        setNumber(value)\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newContact = {\r\n      id: shortid(),\r\n      name,\r\n      number,      \r\n    };\r\n    setName('');\r\n    setNumber('');\r\n    cbAddNewContact(newContact);\r\n  };\r\n\r\n    return (\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <label>\r\n          <p>Name</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact name\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Number</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact number\"\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  cbAddNewContact: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Styles = styled.div`\r\n  .selector1 {\r\n    width: 95%;\r\n    border-collapse: collapse;\r\n    margin: 20px auto;    \r\n  }\r\n  .selector2 {\r\n    background-color: rgb(63, 207, 243);\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  .selector3 {\r\n    line-height: 2;\r\n   border: 1px solid burlywood;\r\n    text-align: center;\r\n  }\r\n`;\r\nfunction ContactList ({cbRemoveContact, filteredContacts}) {\r\n  const handleClick = (e) => cbRemoveContact(e.target.id);;\r\n    return (\r\n      <Styles>\r\n        <table className=\"selector1\">\r\n          <thead className=\"selector2\">\r\n            <tr>\r\n              <th className=\"selector3\">Name</th>\r\n              <th className=\"selector3\">Phone Number</th>\r\n              <th className=\"selector3\">Etc.</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredContacts.map(({ id, name, number }) => (\r\n              <tr key={id}>\r\n                <td\r\n                  className=\"selector3\"\r\n                  style={{ textTransform: \"capitalize\" }}\r\n                >\r\n                  {name}\r\n                </td>\r\n                <td className=\"selector3\">{number}</td>\r\n                <td className=\"selector3\">\r\n                  <button\r\n                    className=\"button\"\r\n                    type=\"button\"\r\n                    onClick={handleClick}\r\n                    id={id}\r\n                  >\r\n                    Delete contact\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </Styles>\r\n    );\r\n}\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  filteredContacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  cbRemoveContact: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nFilter.propTypes = {\r\n  filteringName: PropTypes.string,\r\n  cbInputChange: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction Filter({ filteringName, cbInputChange }) {\r\n  return (\r\n    <label className={styles.filter}>\r\n      <p className=\"label\">Find contacts by name</p>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filteringName}\r\n        onChange={cbInputChange}\r\n        placeholder=\"Enter query name\"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import { useState, useMemo } from \"react\";\r\nimport { useLS } from '../../hooks/useLS';\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [contacts, setContacts] = useLS('allContacts', []);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    name === \"filter\" && setFilter(value);\r\n  };\r\n\r\n  const addNewContact = (newContact) => {\r\n    const isExists = contacts.some(\r\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\r\n    );\r\n    isExists\r\n      ? alert(`${newContact.name} is already in contacts`)\r\n      : setContacts((prev) => [...prev, newContact]);\r\n  };\r\n\r\n  const removeContact = (id) => setContacts(contacts.filter((contact) => contact.id !== id));\r\n\r\n  const filteredContacts = useMemo(() => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  },[contacts, filter])\r\n\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Phonebook</h1>\r\n        <ContactForm cbAddNewContact={addNewContact} />\r\n        <h2>Contacts</h2>\r\n        <div className=\"Contacts\">\r\n        <Filter filteringName={filter} cbInputChange={handleChange} />\r\n        <ContactList\r\n          filteredContacts={filteredContacts}\r\n          cbRemoveContact={removeContact}\r\n          />\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport const useLS = (key, init_value) => {\r\n  const [state, setState] = useState(\r\n    () => JSON.parse(localStorage.getItem(key)) ?? init_value,\r\n  );\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n  return [state, setState];\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App/App.jsx\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}